pipeline {
    agent any
    environment {
        BUILD_CONF = credentials('akamir-build-conf')
        METASERVER_ENV_DEV = credentials('akamir-metaserver-env-dev')
        METACLIENT_ENV_DEV = credentials('akamir-metaclient-env-dev')
    }
    stages {
        stage("Prepare"){
            steps{
                sh 'cp ${BUILD_CONF} .jenkins.conf'
                load '.jenkins.conf'
                discordSend description: "Build Start - ${env.JOB_NAME} ${env.BUILD_NUMBER}", link: env.BUILD_URL, result: currentBuild.currentResult, title: env.JOB_NAME, webhookURL: env.DISCORD_WEBHOOK
                sh 'ssh -v -o StrictHostKeyChecking=no ${DEV_BUILD_USER}@${DEV_BUILD_HOST} -p ${DEV_BUILD_PORT} "mkdir -p ${PROJECT_NAME}/${REPO_NAME}/node_modules && touch ${PROJECT_NAME}/${REPO_NAME}/dummy.js"'
                sh 'ssh -v -p ${DEV_BUILD_PORT} ${DEV_BUILD_USER}@${DEV_BUILD_HOST} "cd ${PROJECT_NAME}/${REPO_NAME} && find . -maxdepth 1 ! -path . ! \\( -name node_modules -or -name package-lock.json -or -name dist \\) -print0 | xargs -0 sudo rm -r"'
                sh 'scp -v -P ${DEV_BUILD_PORT} -rp * ${DEV_BUILD_USER}@${DEV_BUILD_HOST}:~/${PROJECT_NAME}/${REPO_NAME}/'
                sh 'scp -v -P ${DEV_BUILD_PORT} ${METASERVER_ENV_DEV} ${DEV_BUILD_USER}@${DEV_BUILD_HOST}:~/${PROJECT_NAME}/${REPO_NAME}/apps/${METASERVER_APP}/.development.env'
                sh 'scp -v -P ${DEV_BUILD_PORT} ${METACLIENT_ENV_DEV} ${DEV_BUILD_USER}@${DEV_BUILD_HOST}:~/${PROJECT_NAME}/${REPO_NAME}/apps/${METACLIENT_APP}/.env'
            }        
        }
        stage("Build"){
            steps{
                sh 'ssh -v ${DEV_BUILD_USER}@${DEV_BUILD_HOST} -p ${DEV_BUILD_PORT} "cd ${PROJECT_NAME}/${REPO_NAME} && npm i  --legacy-peer-deps"'
                sh 'ssh -v ${DEV_BUILD_USER}@${DEV_BUILD_HOST} -p ${DEV_BUILD_PORT} "cd ${PROJECT_NAME}/${REPO_NAME} && sudo nx affected:build --all --parallel=5"'
                sh 'ssh -v ${DEV_BUILD_USER}@${DEV_BUILD_HOST} -p ${DEV_BUILD_PORT} "cd ${PROJECT_NAME}/${REPO_NAME} && sudo cp apps/${METASERVER_APP}/.development.env dist/apps/${METASERVER_APP}/.development.env"'
                sh 'ssh -v ${DEV_BUILD_USER}@${DEV_BUILD_HOST} -p ${DEV_BUILD_PORT} "cd ${PROJECT_NAME}/${REPO_NAME} && sudo cp apps/${METACLIENT_APP}/.env dist/apps/${METACLIENT_APP}/.env"'
                sh 'ssh -v ${DEV_BUILD_USER}@${DEV_BUILD_HOST} -p ${DEV_BUILD_PORT} "cd ${PROJECT_NAME}/${REPO_NAME} && sudo docker system prune -a -f && sudo docker-compose -f infra/akamir/docker-compose.yml build --parallel"'
            }
        }
        // stage("Test"){
        // }
        stage("Distribute"){
            parallel{
                stage("Distribute MetaServer"){
                    steps{
                        sh 'ssh -v ${DEV_BUILD_USER}@${DEV_BUILD_HOST} -p ${DEV_BUILD_PORT} "docker save ${REPO_NAME}_${METASERVER_APP} > ~/${PROJECT_NAME}/${METASERVER_APP}.tar"' 
                        sh 'ssh -v ${DEV_BUILD_USER}@${DEV_BUILD_HOST} -p ${DEV_BUILD_PORT} "scp -v -o StrictHostKeyChecking=no -P ${TEST_PORT} ~/${PROJECT_NAME}/${METASERVER_APP}.tar ${TEST_USER}@${TEST_HOST}:~/${METASERVER_APP}.tar"'
                        sh 'ssh -v -o StrictHostKeyChecking=no ${TEST_USER}@${TEST_HOST} -p ${TEST_PORT} "docker load < ${METASERVER_APP}.tar"'
                    }
                }
                stage("Distribute MetaClient"){
                    steps{
                        sh 'ssh -v ${DEV_BUILD_USER}@${DEV_BUILD_HOST} -p ${DEV_BUILD_PORT} "docker save ${REPO_NAME}_${METACLIENT_APP} > ~/${PROJECT_NAME}/${METACLIENT_APP}.tar"' 
                        sh 'ssh -v ${DEV_BUILD_USER}@${DEV_BUILD_HOST} -p ${DEV_BUILD_PORT} "scp -v -o StrictHostKeyChecking=no -P ${TEST_PORT} ~/${PROJECT_NAME}/${METACLIENT_APP}.tar ${TEST_USER}@${TEST_HOST}:~/${METACLIENT_APP}.tar"'
                        sh 'ssh -v -o StrictHostKeyChecking=no ${TEST_USER}@${TEST_HOST} -p ${TEST_PORT} "docker load < ${METACLIENT_APP}.tar"'
                    }
                }
            }
        }
        stage("Deploy Test Server"){
            steps {
                sh 'ssh -v ${DEV_BUILD_USER}@${DEV_BUILD_HOST} -p ${DEV_BUILD_PORT} "scp -v -P ${TEST_PORT} ~/${PROJECT_NAME}/${REPO_NAME}/infra/test/docker-compose.yml ${TEST_USER}@${TEST_HOST}:~/${PROJECT_NAME}/docker-compose.yml"'
                sh 'ssh -v ${TEST_USER}@${TEST_HOST} -p ${TEST_PORT} "cd ${PROJECT_NAME} && docker-compose up --force-recreate -d && docker system prune -a -f"'
                sh 'ssh -v ${DEV_BUILD_USER}@${DEV_BUILD_HOST} -p ${DEV_BUILD_PORT} "docker system prune -a -f"'
            }
        }
    }
    post {
        failure {
            discordSend description: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER}", link: env.BUILD_URL, result: currentBuild.currentResult, title: env.JOB_NAME, webhookURL: env.DISCORD_WEBHOOK
        }
        success {
            discordSend description: "Build Succeed - ${env.JOB_NAME} ${env.BUILD_NUMBER}", link: env.BUILD_URL, result: currentBuild.currentResult, title: env.JOB_NAME, webhookURL: env.DISCORD_WEBHOOK
        }
    }
}